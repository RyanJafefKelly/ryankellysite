{"version":3,"sources":["pages/HomePage.js","pages/Projects.js","Topbar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","heading","fontFamily","fontSize","textAlign","paddingTop","body","bodyInline","display","paddingRight","paddingLeft","backgroundDiv","color","backgroundColor","HomePage","classes","Fragment","className","Typography","style","Link","href","onClick","event","preventDefault","window","open","Projects","root","toolbar","padding","width","justifyContent","alignItems","Topbar","history","useHistory","Toolbar","Box","ml","mr","push","App","Suspense","exact","path","name","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAIMA,EAAYC,IAAW,CACzBC,QAAS,CACLC,WAAY,QACZC,SAAU,GACVC,UAAW,SACXC,WAAY,GAEhBC,KAAM,CACFD,WAAY,EACZD,UAAW,UAEfG,WAAY,CACRF,WAAY,GACZG,QAAS,SACTC,aAAc,GACdC,YAAa,IAEjBC,cAAe,CACXC,MAAO,QACPC,gBAAiB,aAmCVC,MA/Bf,WACI,IAAMC,EAAUhB,IAGhB,OACA,kBAAC,IAAMiB,SAAP,KACI,yBAAKC,UAAWF,EAAQJ,eACpB,kBAACO,EAAA,EAAD,CAAYD,UAAWF,EAAQd,SAA/B,cACA,kBAACiB,EAAA,EAAD,CAAYD,UAAWF,EAAQT,MAA/B,kBACA,kBAACY,EAAA,EAAD,CAAYD,UAAWF,EAAQT,MAA/B,oCACA,kBAACY,EAAA,EAAD,CAAYD,UAAWF,EAAQT,MAA/B,wCACA,yBAAKa,MAAO,CAACf,UAAW,WACpB,kBAACc,EAAA,EAAD,CAAYD,UAAWF,EAAQR,YAC3B,kBAACa,EAAA,EAAD,CAAMC,KAAK,IAAIC,QAXR,SAACC,GAAD,OAAWA,EAAMC,kBAWgBZ,MAAM,WAA9C,iBAIJ,kBAACM,EAAA,EAAD,CAAYD,UAAWF,EAAQR,YAC3B,kBAACa,EAAA,EAAD,CACAE,QAAS,kBAAMG,OAAOC,KAAK,sCAC3Bd,MAAM,WAFN,eCrCLe,EANE,WACb,OAAO,0C,2BCGL5B,EAAYC,YAAW,CACzB4B,KAAM,CACFhB,MAAO,SACPC,gBAAiB,WAErBgB,QAAS,CACLhB,gBAAiB,UACjBiB,QAAS,EACTlB,MAAO,UACP,mBAAoB,CAChBF,YAAa,GACbD,aAAc,GACdD,QAAS,OACTuB,MAAO,OACPC,eAAgB,gBAChB,mBAAoB,CAChBxB,QAAS,OACTyB,WAAY,cAwCbC,EAlCA,WACX,IAAMnB,EAAUhB,IACVoC,EAAUC,cAEhB,OACA,kBAAC,IAAMpB,SAAP,KACI,kBAACqB,EAAA,EAAD,CAASpB,UAAWF,EAAQc,SAC1B,kBAACS,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAKC,GAAI,IAET,kBAACD,EAAA,EAAD,MAEA,kBAACA,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CAAKE,GAAI,GACL,kBAACtB,EAAA,EAAD,CAAYC,MAAO,CAACP,MAAO,QAASH,aAAc,KAC9C,kBAACW,EAAA,EAAD,CAAMR,MAAM,UAAUU,QAAS,kBAAMa,EAAQM,KAAK,OAAlD,WAKR,kBAACH,EAAA,EAAD,CAAKE,GAAI,GACL,kBAACtB,EAAA,EAAD,CAAYC,MAAO,CAACP,MAAO,UACvB,kBAACQ,EAAA,EAAD,CAAMR,MAAM,UAAUU,QAAS,kBAAMa,EAAQM,KAAK,eAAlD,mBC/BTC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,KAAK,WAAWC,UAAWjC,IACjD,kBAAC,IAAD,CAAO+B,KAAK,YAAYC,KAAK,WAAWC,UAAWpB,QCDzCqB,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4d7afca7.chunk.js","sourcesContent":["import React from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport { Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    heading: {\n        fontFamily: 'Arial',\n        fontSize: 40,\n        textAlign: 'center',\n        paddingTop: 5\n    },\n    body: {\n        paddingTop: 5,\n        textAlign: 'center'\n    },\n    bodyInline: {\n        paddingTop: 10,\n        display: 'inline',\n        paddingRight: 10,\n        paddingLeft: 10\n    },\n    backgroundDiv: {\n        color: 'white',\n        backgroundColor: '#0D47A1'\n    }\n});\n\nfunction HomePage() {\n    const classes = useStyles();\n    const preventDefault = (event) => event.preventDefault();\n\n    return (\n    <React.Fragment>\n        <div className={classes.backgroundDiv}>\n            <Typography className={classes.heading}>Ryan Kelly</Typography>\n            <Typography className={classes.body}>ryan@kiiii.com</Typography>\n            <Typography className={classes.body}>Developer, Moreton Blue Software</Typography>\n            <Typography className={classes.body}>Bachelor of Maths/IT, QUT 2016-2020 </Typography>\n            <div style={{textAlign: 'center'}}>\n                <Typography className={classes.bodyInline}>\n                    <Link href=\"#\" onClick={preventDefault} color=\"inherit\">\n                        Résumé                   \n                    </Link>\n                </Typography>\n                <Typography className={classes.bodyInline}>\n                    <Link \n                    onClick={() => window.open('https://github.com/RyanJafefKelly', )}\n                    color=\"inherit\">\n                        Github\n                    </Link>\n                </Typography>\n            </div>\n        </div>\n\n    </React.Fragment>\n    );\n};\n\nexport default HomePage;","import React from 'react';\n\nconst Projects = () => {\n    return(<div>\n        Projects\n    </div>);\n};\n\nexport default Projects;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Typography, Button, Box, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root: {\n        color: '#white',\n        backgroundColor: '#0D47A1',\n    },\n    toolbar: {\n        backgroundColor: '#0D47A1',\n        padding: 0,\n        color: '#0D47A1',\n        '& > .MuiBox-root': {\n            paddingLeft: 10,\n            paddingRight: 10,\n            display: 'flex',\n            width: '100%',\n            justifyContent: 'space-between',\n            '& > .MuiBox-root': {\n                display: 'flex',\n                alignItems: 'center'\n            }\n        }\n    }\n});\n\nconst Topbar = () => {\n    const classes = useStyles();\n    const history = useHistory();\n\n    return (\n    <React.Fragment>\n        <Toolbar className={classes.toolbar}>\n          <Box>\n            <Box ml={1}>\n            </Box>\n            <Box>\n            </Box>\n            <Box>\n                <Box mr={1}>\n                    <Typography style={{color: 'white', paddingRight: 15}}>\n                        <Link color='inherit' onClick={() => history.push('/')}>\n                            About\n                        </Link>\n                    </Typography>\n                </Box>\n                <Box mr={1}>\n                    <Typography style={{color: 'white'}}>\n                        <Link color='inherit' onClick={() => history.push('/projects')}>\n                            Projects\n                        </Link>\n                    </Typography>\n                </Box>\n            </Box>\n          </Box>\n      </Toolbar>\n    </React.Fragment>\n    );\n}\n\nexport default Topbar;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport Projects from './pages/Projects';\nimport Topbar from './Topbar';\n\nfunction App() {\n  return (\n    <Router>\n      <React.Suspense>\n        <Topbar />\n        <Switch>\n          <Route exact path=\"/\" name=\"HomePage\" component={HomePage} />\n          <Route path=\"/projects\" name=\"Projects\" component={Projects} />\n        </Switch>\n      </React.Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}